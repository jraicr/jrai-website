---
import SvgIconClip from "@/components/svg-icons/SvgIconClip.astro";
import SvgIconGithub from "@/components/svg-icons/SvgIconGithub.astro";
import SvgIconLike from "@/components/svg-icons/SvgIconLike.astro";
import { getLangFromUrl, useTranslations, useTranslatedPath } from "@/i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

interface Props {
    iconType: string;
    text: string;
    href: string;
}

const { iconType, text, href } = Astro.props;

let DynamicIcon = SvgIconClip;
let ariaText = "";

function renderIconSwitch(iconType: string) {
    switch (iconType) {
        case "clip":
            DynamicIcon = SvgIconClip;
            ariaText = t('aria-label.link-text');
            break;

        case "github":
            DynamicIcon = SvgIconGithub;
            ariaText = t('aria-label.link-github');
            break;

        case "like":
            DynamicIcon = SvgIconLike;
            ariaText = t('aria-label.link-likes');
            break;

        default:
            DynamicIcon = SvgIconClip;
            ariaText = t('aria-label.link-text');
    }
}

renderIconSwitch(iconType);
---

<li class="related-link-element">
    <a class="related-link" href={href} target="_blank" rel="noreferrer" aria-label={ariaText}>
        <DynamicIcon />
        <span>{text}</span>
    </a>
</li>

<style>
    .related-link-element {
        margin-right: 1rem;
    }

    .related-link {
        color: var(--link-color);
        font-size: 0.875rem;
        font-weight: 500;
        line-height: 1.25rem;
        align-items: center;
        display: inline-flex;
        margin-top: 0.5rem;
        position: relative;
        text-decoration: inherit;
    }

    .related-link:hover {
        color: var(--hover-link-color);
    }
</style>
