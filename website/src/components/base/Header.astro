---
import GithubIcon from "@/components/social-icons/github.astro";
import TwitterIcon from "@/components/social-icons/twitter.astro";
import LinkedinIcon from "@/components/social-icons/linkedin.astro";
import HeaderNav from "@/components/HeaderNav.astro";

import { getLangFromUrl, useTranslations } from "@/i18n/utils";

interface Props {
    title: string;
    subtitle: string;
    tagline: string;
    githubUser: string;
    twitterUser: string;
    linkedinUser: string;
}

const { title, subtitle, tagline, githubUser, twitterUser, linkedinUser } =
    Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<header>
    <div>
        <p class="greeting-line">{t("header.greeting")}</p>
        <h1>
            <a href="/"
                >{t("header.iam")}&nbsp;<span class="highlight">
                    {title}</span
                ></a
            >
        </h1>
        <h2>{subtitle}</h2>
        <p class="tagline">{tagline}</p>

        <HeaderNav />
    </div>

    <!-- SOCIAL ICONS -->
    <ul class="social-icons-list">
        <GithubIcon username={githubUser} />
        <TwitterIcon username={twitterUser} />
        <LinkedinIcon username={linkedinUser} />
    </ul>
</header>

<style>
    h1 {
        font-size: 2.25rem;
        line-height: 2.5rem;
        font-weight: 700;
    }

    h2 {
        font-size: 1.125rem;
        font-weight: 500;
        line-height: 1.75rem;
        letter-spacing: -0.025em;
        margin-top: 0.75rem;
    }

    .tagline {
        max-width: 20rem;
        line-height: 1.5;
        margin-top: 1rem;
    }

    .greeting-line {
        width: -moz-fit-content;
        width: fit-content;
        font-size: 1.125rem;
        font-weight: 500;
        line-height: 1.5;
        color: var(--main-headline);
        margin-bottom: 0.75rem;
    }

    .greeting-line-animation {
        animation-name: greeting-anim;
        animation-duration: 2s;
        animation-timing-function: cubic-bezier(0.27, 1, 0.175, 1);
        transition: all;
    }

    @keyframes greeting-anim {
        0% {
            transform: translate(0, 0) rotate(3deg) skewX(0) skewY(0)
                scaleX(0.95) scaleY(0.95);
        }
        25% {
            transform: translate(0, 10px) rotate(10deg) skewX(0) skewY(0)
                scaleX(0.75) scaleY(0.75);
        }
        50% {
            transform: translate(0, -45px) rotate(-15deg) skewX(0) skewY(0)
                scaleX(1.25) scaleY(1.25);
        }

        55% {
            transform: translate(0, -40px) rotate(20deg) skewX(0) skewY(0)
                scaleX(1.25) scaleY(1.25);
        }

        60% {
            transform: translate(0, -35px) rotate(-15deg) skewX(0) skewY(0)
                scaleX(1.25) scaleY(1.25);
        }

        65% {
            transform: translate(0, -30px) rotate(20deg) skewX(0) skewY(0)
                scaleX(1.25) scaleY(1.25);
        }

        70% {
            transform: translate(0, -25px) rotate(-15deg) skewX(0) skewY(0)
                scaleX(1.25) scaleY(1.25);
        }
        100% {
            transform: translate(0, 0) rotate(0) skewX(0) skewY(0) scaleX(1)
                scaleY(1);
        }
    }

    .highlight {
        color: hsl(46, 100%, 50%);
    }

    .social-icons-list {
        display: flex;
        align-items: center;
        margin-left: 0.25rem;
        margin-top: 2rem;
    }

    @media (min-width: 640px) {
        h1 {
            font-size: 3rem;
            line-height: 1;
        }

        .greeting-line,
        h2 {
            font-size: 1.25rem;
            line-height: 1.75rem;
        }
    }

    @media (min-width: 1024px) {
        h1 {
            font-size: 3.2rem;
        }

        header {
            display: flex;
            flex-direction: column;
            width: 50%;
            max-height: 100vh;
            top: 0;
            position: sticky;

            padding-top: 6rem;
            padding-bottom: 6rem;
            justify-content: space-between;
        }
    }
</style>

<script>
    let greetingLine = document.querySelector(".greeting-line");
    let runningAnimation = false;

    greetingLine?.addEventListener("click", () => {
        if (!runningAnimation) {
            runningAnimation = true;
            greetingLine?.classList.add("greeting-line-animation");

            let animDurationInSeconds = greetingLine
                ?.computedStyleMap()
                .get("animation-duration") as CSSUnitValue;

            let animDurationInMiliseconds = animDurationInSeconds.value * 1000;
            let durationOffset = 250;

            setTimeout(() => {
                removeAnimation(greetingLine, "greeting-line-animation");
                runningAnimation = false;
            }, animDurationInMiliseconds + durationOffset);
        }
    });

    function removeAnimation(e: Element | null, animationName: string) {
        if (e) {
            e.classList.remove(animationName);
        }
    }
</script>
